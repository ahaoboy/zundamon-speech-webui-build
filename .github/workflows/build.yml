name: build

permissions:
  contents: write

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-windows-cpu:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: winget
        run: |
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
          iex "& {$(irm get.scoop.sh)} -RunAsAdmin"
          scoop install main/winget -g
          winget install Microsoft.VisualStudio.2022.BuildTools --force --accept-package-agreements --accept-source-agreements
          winget install Microsoft.VisualStudio.2022.Community --override "--quiet --add Microsoft.VisualStudio.Workload.NativeDesktop" --force --accept-package-agreements --accept-source-agreements

      - uses: easy-install/easy-setup@v1
        with:
          url: https://github.com/Kitware/CMake/releases/download/v4.0.0/cmake-4.0.0-windows-x86_64.zip

      - name: Download Python 3.9.13
        run: |
          Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.9.13/python-3.9.13-amd64.exe" -OutFile "python_installer.exe"
          Start-Process -FilePath ".\python_installer.exe" -ArgumentList "/quiet InstallAllUsers=0 TargetDir=$PWD\python_cpu" -NoNewWindow -Wait
          echo "$PWD\python_cpu" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH
          echo "$PWD\python_cpu\Scripts" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

          Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile "./python_cpu/get-pip.py"

          # mkdir -p ~/pip
          # echo "[global]" >> ~/pip/pip.ini
          # echo "no-cache-dir = true" >> ~/pip/pip.ini
          # echo "target = ${PWD}/python_cpu/Lib/site-packages/" >> ~/pip/pip.ini
          # cat ~/pip/pip.ini

      # - name: Download Python Embeddable  3.9.13
      #   run: |
      #     $PYTHON_VERSION = "3.9.13"
      #     $URL = "https://www.python.org/ftp/python/$PYTHON_VERSION/python-$PYTHON_VERSION-embed-amd64.zip"
      #     Invoke-WebRequest -Uri $URL -OutFile "python-embed.zip"
      #     Expand-Archive -Path "python-embed.zip" -DestinationPath "python_cpu"
      #     Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile "get-pip.py"
      #     ./python_cpu/python.exe get-pip.py
      #     $pthFile = Get-ChildItem -Path "python_cpu" -Filter "python*._pth" | Select-Object -First 1
      #     $content = Get-Content -Path "python_cpu\$($pthFile.Name)"
      #     $content = $content -replace "#import site", "import site"
      #     $content += "Lib\site-packages"
      #     # $content += "."
      #     Set-Content -Path "python_cpu\$($pthFile.Name)" -Value $content

      #     mkdir -p ~/pip
      #     echo "[global]" >> ~/pip/pip.ini
      #     echo "no-cache-dir = true" >> ~/pip/pip.ini
      #     echo "target = ${PWD}/python_cpu/Lib/site-packages/" >> ~/pip/pip.ini

      #     cat ~/pip/pip.ini

      #     echo "$PWD\python_cpu" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH
      #     echo "$PWD\python_cpu\Scripts" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

      - name: version
        run: |
          which pip
          which python

          python --version

      # - name: install pyopenjtalk
      #   run: |
      #     pip install git+https://github.com/r9y9/pyopenjtalk.git@fix-cmake4

      # pip install aliyun-python-sdk-dyvmsapi
      # pip install aliyun-python-sdk-core

      # pip install aliyun-python-sdk-core-v3==2.13.10
      # # pip install --config-settings="--build-option=build_ext" --config-settings="--build-option=--plat-name=win-amd64" jieba_fast

      - name: install nltk
        run: |
          python -m pip install nltk
          pip show nltk
          python -c "import nltk; nltk.download('averaged_perceptron_tagger'); nltk.download('averaged_perceptron_tagger_eng')"

      - name: copy nltk_data
        run: |
          $username = $env:USERNAME
          $source = "C:\Users\$username\AppData\Roaming\nltk_data"
          $destination = "./python_cpu"

          Copy-Item -Path $source -Destination "$destination\nltk_data" -Recurse -Force

          ls ./python_cpu/nltk_data

      - name: install zundamonspeech_builder_cpu_v1
        run: |
          ./bat/zundamonspeech_builder_cpu_v1.0.bat

      - name: patch LangSegment
        run: |
          Copy-Item -Path LangSegment.patch.py -Destination./python_cpu/Lib/site-packages/LangSegment/__init__.py -Force

      - name: zip
        run: |
          ls python_cpu/Scripts
          Get-ChildItem -Path "./python_cpu/scripts" -Filter "pip*.exe" | Remove-Item -Force

          pip show torch

          mkdir dist
          7z a -tzip ./dist/zundamonspeech_builder_cpu.zip python_cpu zundamon-speech-webui run_cpu.bat -v2000m
          7z a -tzip ./dist/python_cpu.zip python_cpu
          ls dist

      - name: release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          artifacts: ./dist/*
          allowUpdates: true

  build-windows-gpu:
    if: false
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: winget
        run: |
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
          iex "& {$(irm get.scoop.sh)} -RunAsAdmin"
          scoop install main/winget -g
          winget install Microsoft.VisualStudio.2022.BuildTools --force --accept-package-agreements --accept-source-agreements
          winget install Microsoft.VisualStudio.2022.Community --override "--quiet --add Microsoft.VisualStudio.Workload.NativeDesktop" --force --accept-package-agreements --accept-source-agreements

      - uses: easy-install/easy-setup@v1
        with:
          url: https://github.com/Kitware/CMake/releases/download/v4.0.0/cmake-4.0.0-windows-x86_64.zip

      # - name: Download Python 3.9.13
      #   run: |
      #     Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.9.13/python-3.9.13-amd64.exe" -OutFile "python_installer.exe"
      #     Start-Process -FilePath ".\python_installer.exe" -ArgumentList "/quiet InstallAllUsers=0 TargetDir=$PWD\python" -NoNewWindow -Wait
      #     echo "$PWD\python" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH
      #     echo "$PWD\python\Scripts" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

      - name: Download Python Embeddable  3.9.13
        run: |
          $PYTHON_VERSION = "3.9.13"
          $URL = "https://www.python.org/ftp/python/$PYTHON_VERSION/python-$PYTHON_VERSION-embed-amd64.zip"
          Invoke-WebRequest -Uri $URL -OutFile "python-embed.zip"
          Expand-Archive -Path "python-embed.zip" -DestinationPath "python_gpu"
          Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile "get-pip.py"
          ./python_gpu/python.exe get-pip.py
          $pthFile = Get-ChildItem -Path "python_gpu" -Filter "python*._pth" | Select-Object -First 1
          $content = Get-Content -Path "python_gpu/$($pthFile.Name)"
          $content = $content -replace "#import site", "import site"
          $content += "Lib\site-packages"
          # $content += "."
          Set-Content -Path "python_gpu/$($pthFile.Name)" -Value $content

          mkdir -p ~/pip
          echo "[global]" >> ~/pip/pip.ini
          echo "no-cache-dir = true" >> ~/pip/pip.ini
          echo "target = ${PWD}/python_gpu/Lib/site-packages/" >> ~/pip/pip.ini

          cat ~/pip/pip.ini

          echo "$PWD\python_gpu" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH
          echo "$PWD\python_gpu\Scripts" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@master
        with:
          cuda: "12.1.0"

      - name: install nltk
        run: |
          pip install nltk
          python -c "import nltk; nltk.download('averaged_perceptron_tagger'); nltk.download('averaged_perceptron_tagger_eng')"

      - name: version
        run: |
          which pip
          which python

          python --version

      - name: install pyopenjtalk
        run: |
          pip install git+https://github.com/r9y9/pyopenjtalk.git@fix-cmake4
          pip install aliyun-python-sdk-dyvmsapi
          pip install aliyun-python-sdk-core-v3==2.13.10
          pip install aliyun-python-sdk-core
          # pip install --config-settings="--build-option=build_ext" --config-settings="--build-option=--plat-name=win-amd64" jieba_fast

      - name: install zundamonspeech_builder_gpu_v1
        run: |
          ./bat-en/zundamonspeech_builder_gpu_v1.0.bat

      # - name: copy nltk_data
      #   run: |
      #     $username = $env:USERNAME
      #     $source = "C:\Users\$username\AppData\Roaming\nltk_data"
      #     $destination = "./python_cpu"

      #     Copy-Item -Path $source -Destination "$destination\nltk_data" -Recurse -Force

      #     ls ./python_cpu/nltk_data

      - name: zip
        run: |
          mkdir dist
          7z a -tzip ./dist/zundamonspeech_builder_gpu.zip python_gpu zundamon-speech-webui -v2000m
          7z a -tzip ./dist/python_gpu.zip python_gpu

          ls dist

      - name: release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          artifacts: ./dist/*
          allowUpdates: true
